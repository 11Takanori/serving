/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/google/elafros/pkg/apis/ela/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElaServiceLister helps list ElaServices.
type ElaServiceLister interface {
	// List lists all ElaServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ElaService, err error)
	// ElaServices returns an object that can list and get ElaServices.
	ElaServices(namespace string) ElaServiceNamespaceLister
	ElaServiceListerExpansion
}

// elaServiceLister implements the ElaServiceLister interface.
type elaServiceLister struct {
	indexer cache.Indexer
}

// NewElaServiceLister returns a new ElaServiceLister.
func NewElaServiceLister(indexer cache.Indexer) ElaServiceLister {
	return &elaServiceLister{indexer: indexer}
}

// List lists all ElaServices in the indexer.
func (s *elaServiceLister) List(selector labels.Selector) (ret []*v1alpha1.ElaService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElaService))
	})
	return ret, err
}

// ElaServices returns an object that can list and get ElaServices.
func (s *elaServiceLister) ElaServices(namespace string) ElaServiceNamespaceLister {
	return elaServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ElaServiceNamespaceLister helps list and get ElaServices.
type ElaServiceNamespaceLister interface {
	// List lists all ElaServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ElaService, err error)
	// Get retrieves the ElaService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ElaService, error)
	ElaServiceNamespaceListerExpansion
}

// elaServiceNamespaceLister implements the ElaServiceNamespaceLister
// interface.
type elaServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ElaServices in the indexer for a given namespace.
func (s elaServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ElaService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElaService))
	})
	return ret, err
}

// Get retrieves the ElaService from the indexer for a given namespace and name.
func (s elaServiceNamespaceLister) Get(name string) (*v1alpha1.ElaService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("elaservice"), name)
	}
	return obj.(*v1alpha1.ElaService), nil
}
